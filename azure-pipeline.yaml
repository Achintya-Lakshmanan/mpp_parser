trigger:
  branches:
    include:
      - Dev

stages:
  - stage: Build
    displayName: 'Build and Zip'
    jobs:
      - job: Build
        displayName: 'Install, Build, Zip'
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '20.10.x'
            displayName: 'Install Node.js'

          - script: |
              npm ci            
              cd src && npm ci
              npm run build     
            displayName: 'Install Dependencies and Build'

          - script: |
              ls -la
              mkdir -p deploy              
              cp -r src deploy/src
              cp run.sh deploy/run.sh 
              cp setup-env.sh deploy/setup-env.sh
              cp server.js deploy/server.js  
              cp package.json package-lock.json deploy/  
            displayName: 'Prepare Deployment Folder'

          - script: |
              cd deploy 
              chmod +x run.sh              
              npm install --omit=dev
              cd src && npm install --omit=dev
            displayName: 'Install Production Dependencies in Deploy Folder'

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: 'deploy'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
              replaceExistingArchive: true
            displayName: 'Create zip package'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/app.zip'
              ArtifactName: 'drop'
            displayName: 'Publish Artifact'

  - stage: Deploy
    displayName: 'Deploy to Azure App Service'
    dependsOn: Build
    jobs:
      - job: Deploy
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - download: current
            artifact: drop

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'LMT-PRODUCTS'
              appType: 'webAppLinux'
              appName: 'lmtmpp-parserapp'
              package: '$(Pipeline.Workspace)/drop/app.zip'
              startUpCommand: 'bash run.sh'
